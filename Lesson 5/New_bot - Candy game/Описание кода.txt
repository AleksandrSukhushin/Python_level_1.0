Main.py - модуль программы для запуска бота:

1. Импорт объекта диспетчера (dp) и модуль исполнителя из модуля обработчиков (handlers).
Диспетчер отвечает за маршрутизацию сообщений от пользователя к соответствующим обработчикам.
2. Функция on_start вызывается при запуске бота, выводя на консоль сообщение «Бот запущен», указывая на то,
что бот был успешно запущен.
3. Метод executor.start_polling для запуска бота. Объект dp передается в качестве
первого аргумента, а аргументу skip_updates присваивается значение True, чтобы бот не обрабатывал старые обновления.
Аргумент on_startup устанавливается на функцию on_start, чтобы она выполнялась при запуске бота.

Loader.py - модуль инициализации бота:

1. Импорт классов Bot и Dispatcher из библиотеки aiogram.
2. Класс Bot используется для создания экземпляра бота.
Первым его аргументом является токен бота, представляющий собой строку, которая аутентифицирует бота с помощью
Telegram Bot API.
3. Класс Dispatcher используется для создания экземпляра диспетчера, отвечающего за маршрутизацию входящих сообщений
соответствующим обработчикам. Экземпляр Dispatcher создается путем передачи экземпляра Bot в качестве аргумента.
Диспетчер используется для привязки обработчиков к боту, чтобы он мог обрабатывать различные типы сообщений и команд,
полученных от пользователей.

Game.py - модуль инициализации переменных для использовании в блоке обработчиков.

Handlers - каталог обработчиков

__init__.py - модуль экспорта объектов dp:

1. Импорт объекта dp из трех разных модулей: start, help и take.
Каждый из этих модулей содержит обработчики различных типов сообщений или команд, которые может обрабатывать бот.
2. Список __all__ в конце определяет, какие символы следует экспортировать. В этом случае объект dp является
единственным экспортируемым символом, поэтому он будет единственным символом, доступным для других модулей, которые
импортируют этот модуль.

Help.py - модуль обработчика команды /help:

1. Импорт объекта dp из модуля загрузчика и класс Message из модуля aiogram.types.
2. Декоратор @dp.message_handler используется для определения функции как обработчика сообщений, полученных ботом.
Аргумент commands = ['help'] указывает, что этот обработчик будет запущен только в том случае, если сообщение
начинается с команды /help.
3. Функция-обработчик mes_help выполняется при получении ботом указанной команды. Аргумент сообщения функции —
это экземпляр класса Message, который содержит информацию о сообщении, полученном ботом.
4. Строка await message.answer - отправляет пользователю ответ
5. Строка print(message.from_user.id) выводит Telegram ID пользователя на консоль. Это может быть полезно для
отладки или отслеживания статистики использования.

Start.py - модуль обработчика команды /start:

1. Импорт объекта dp из модуля загрузчика и класс Message из модуля aiogram.types.
2. Декоратор @dp.message_handler используется для определения функции как обработчика сообщений, полученных ботом.
Аргумент commands = ['start'] указывает, что этот обработчик будет запущен только в том случае, если сообщение
начинается с команды /start.
3. Функция-обработчик mes_start выполняется при получении ботом указанной команды. Аргумент сообщения функции —
это экземпляр класса Message, который содержит информацию о сообщении, полученном ботом.
4. Код внутри функции проверяет, не запускал ли уже игру пользователь, отправивший команду /start.
Если пользователь уже играет в игру, бот отправляет соответствующее сообщение пользователю.
Если пользователь еще не играет в игру, бот отправляет соответствующее сообщение и добавляет информацию о пользователе
в список сохраненных игр. В атрибуте game.total. информация о пользователе состоит из его идентификатора Telegram,
имени и начального количества конфет.

Take.py - модуль реализации игры:

1. Функция-обработчик сообщений mes_duel выполняется при получении сообщения. Эта функция перебирает список «дуэлей»,
хранящийся в списке game.total. Каждый элемент списка представляет собой отдельную игру, причем первый элемент списка —
это идентификатор пользователя, второй элемент — имя пользователя, а третий элемент — количество конфет, оставшихся в игре.
2. Затем обработчик проверяет, участвует ли пользователь, отправивший сообщение, в одной из дуэлей, проверяя, совпадает ли
его идентификатор с идентификатором одного из игроков. Если совпадение найдено, функция переходит к обработке хода
пользователя.
3. Ход пользователя представлен числом, которое он отправляет в своем сообщении, и функция проверяет, является ли это
число допустимым целым числом от 1 до 28. Если это так, количество конфет уменьшается на шаг пользователя, а затем
функция проверяет окончена ли игра с помощью функции check_win. Если игра не окончена, функция генерирует случайное
количество конфет, взятых ботом, соответственно уменьшает количество конфет и снова проверяет, не закончилась ли игра.
Если игра окончена, функция удаляет текущую игру из списка game.total.
4. Если сообщение пользователя не содержит допустимого целого числа, функция отправляет сообщение об ошибке с просьбой
ввести число от 1 до 28.
